{
  "type": "Observable",
  "category": "core",
  "generics": [{
    "name": "T",
    "description": "The type of the observed value."
  }],
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "subscribe",
        "type": {
          "interface": "SubscriptionHandler",
          "generics": ["T"]
        },
        "description": "Invoked whenever a new subscriber is registered. Passed an [object](${doc:SubscriberUrl}) through which values may be passed to the subscriber."
      }
    ]
  },
  "description": "An Observable represents a sequence of values which may be observed. API based on the proposed Ecma TC39 Observable standard. It can be converted to an RxJS Observable via its [`from`](https://rxjs.dev/api/index/function/from) function.",
  "methods": {
    "subscribe": [
      {
        "parameters": [
          {
            "name": "observer",
            "type": {
              "interface": "PartialObserver",
              "generics": ["T"]
            },
            "description": "Object with some or all of the callbacks of ${doc:Subscriber}."
          }
        ],
        "returns": "Subscription",
        "description": "Subscribes to this observable."
      },
      {
        "parameters": [
          {
            "name": "next",
            "type": {
              "callback": [{"name": "value", "type": "T"}],
              "returns": {"type": "any"}
            },
            "ts_type": "NextCb<T> | null",
            "description": "Callback invoked whenever the observed value changes."
          },
          {
            "name": "error",
            "type": {
              "callback": [{"name": "error", "type": "any"}],
              "returns": {"type": "any"}
            },
            "ts_type": "ErrorCb | null",
            "optional": true,
            "description": "Callback invoked when the subscription encounters an error."
          },
          {
            "name": "complete",
            "type": {
              "callback": [],
              "returns": {"type": "any"}
            },
            "ts_type": "CompleteCb | null",
            "optional": true,
            "description": "Callback invoked once when the subscription closes, either by itself or by calling `unsubscribe`. No other callbacks will be invoked from then on."
          }
        ],
        "returns": "Subscription",
        "description": "Subscribes to this observable."
      }
    ],
    "[Symbol.observable]": {
      "ts_only": true,
      "returns": "this"
    }
  },
  "statics": {
    "methods": {
      "mutations": {
        "generics": [
          {
            "name": "T",
            "extends": "object"
          }
        ],
        "parameters": [
          {
            "name": "source",
            "type": "T"
          }
        ],
        "returns": {
          "interface": "Observable",
          "generics": ["T"]
        },
        "description": "Creates an observable emitting the given source object once and then again whenever it fires property change events. It can be used with any widget, NativeObject instance, or object using @property or @prop decorators.\n\nEvents are aggregated, meaning multiple subsequent property changes may result in only one notification to the observer. It is guaranteed that this notification will occur before the next frame is rendered on screen.\n\nThe observable completes if the source object is disposed.\n\nLimitations: The observable will not detect property changes that do not trigger change events, so plain objects, arrays, objects created by third-party libraries or instances of built-in ECMAScript types (such as Map) are not supported. Also, changes of `bounds` or any built-in property giving scroll offsets will *not* trigger the observable."
      }
    }
  },
  "relatedTypes": {
    "SubscriptionHandler": "subscriptionhandler",
    "Subscriber": "subscriber",
    "PartialObserver": "partialobserver",
    "Subscription": "subscription"
  }
}
