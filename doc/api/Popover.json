{
  "type": "Popover",
  "category": "popup",
  "extends": "Popup",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "properties",
        "type": {
          "interface": "Properties",
          "generics": ["Popover"]
        },
        "ts_type": "Properties<Omit<Popover, 'contentView'>>",
        "optional": true,
        "description": "Sets all key-value pairs in the properties object on the `Popover`."
      }
    ]
  },
  "description": "An `Popover` represents a modal ui container that is shown above the apps content. It provides the root element of a new layout hierarchy in the form of its `contentView` property. User provided widgets can be attached to the `contentView` similarly to the `tabris.contentView`. In order to close the `Popover` the `close()` method can be used.\n\nThe appearance of the `Popover` depends on the device size: On larger devices (like tablets) the `Popover` is shown as a floating window whereas on smaller devices it is shown as a fullscreen sheet covering the entire app.",
  "properties": {
    "jsxAttributes": {
      "const": true,
      "readonly": true,
      "ts_only": true,
      "type": "JSXAttributes<this> & {children?: JSXChildren<Widget>, contentView?: never}"
    },
    "contentView": {
      "const": true,
      "readonly": true,
      "default": "ContentView",
      "type": "ContentView",
      "description": "The root widget element containing all children of Popover."
    },
    "width": {
      "type": "Dimension",
      "default": "null",
      "description": "The width of the `Popover` when shown in windowed mode on large screen devices. Will be a platform specific default if set to null."
    },
    "height": {
      "type": "Dimension",
      "default": "null",
      "description": "The height of the `Popover` when shown in windowed mode on large screen devices. Will be a platform specific default if set to null."
    },
    "anchor": {
      "type": "Widget",
      "description": "An anchor `Widget` the `Popover` should attach to. When the anchor is given the `Popover` is positioned next to the anchor `Widget` and provides a visual indication of its relation. When omitted the `Popover` is positioned centered on the screen.",
      "platforms": {
        "android": false
      }
    }
  },
  "statics": {
    "methods": {
      "open": [
        {
          "parameters": [
            {
              "name": "popover",
              "description": "The popover to open",
              "type": "Popover"
            }
          ],
          "description": "Makes the given popover visible. Meant to be used with inline-JSX. In TypeScript it also casts the given JSX element from `any` to an actual Popover.",
          "returns": "Popover"
        }
      ]
    }
  },
  "events": {
    "close": {
      "description": "Fired when the `Popover` was closed."
    }
  },
  "links": [
    {
      "title": "Creating a `Popover` containing a `NavigationView`",
      "snippet": "popover.jsx"
    }
  ]
}
