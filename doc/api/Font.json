{
  "type": "Font",
  "category": "data",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "size",
        "type": "number",
        "description": "Positive number in dip"
      },
      {
        "name": "family",
        "type": {"interface": "Array", "generics": ["string"]},
        "description": "Prioritized list of font families",
        "optional": true
      },
      {
        "name": "weight",
        "type": {"union": ["'black'", "'bold'", "'medium'", "'thin'", "'light'", "'normal'"]},
        "description": "Boldness of the font",
        "optional": true
      },
      {
        "name": "style",
        "type": {"union": ["'italic'", "'normal'"]},
        "description": "Face of the font family to be used",
        "optional": true
      }
    ]
  },
  "description": "Represents a font. See also ${doc:FontValue}",
  "properties": {
    "size": {
      "type": "number",
      "description": "Positive number in dip",
      "const": true,
      "readonly": true
    },
    "family": {
      "type": {"interface": "Array", "generics": ["string"]},
      "description": "Prioritized list of font families",
      "const": true,
      "readonly": true
    },
    "weight": {
      "type": {"union": ["'black'", "'bold'", "'medium'", "'thin'", "'light'", "'normal'"]},
      "description": "Boldness of the font",
      "const": true,
      "readonly": true
    },
    "style": {
      "type": {"union": ["'italic'", "'normal'"]},
      "description": "Face of the font family to be used",
      "const": true,
      "readonly": true
    }
  },
  "methods": {
    "toString": {
      "description": "Returns a string representation of the font using the CSS font shorthand syntax.",
      "returns": "string"
    },
    "equals": {
      "description": "Tests if the given value is a `Font` instance that is deeply equal to this one.",
      "parameters": [{"name": "value", "type": "Font"}],
      "returns": "boolean"
    }

  },
  "statics": {
    "properties": {
      "sansSerif": { "type": "\"sans-serif\"", "readonly": true },
      "serif": { "type": "\"serif\"", "readonly": true },
      "condensed": { "type": "\"condensed\"", "readonly": true },
      "monospace": { "type": "\"monospace\"", "readonly": true }
    },
    "methods": {
      "from": {
        "parameters": [
          {
            "name": "fontValue",
            "description": "The value to create a Font instance from",
            "type": "FontValue"
          }
        ],
        "description": "Creates a new instance of Font using any valid font expression. For any other value, including `null` and `'initial'` the method throws.",
        "returns": "Font"
      },
      "isFontValue": {
        "parameters": [
          {
            "name": "value",
            "description": "The value to test",
            "type": "any"
          }
        ],
        "description": "Returns true if value is a FontValue. This includes `null` and `'initial'`. Use this to check if a value will be accepted by a font property. This is also a valid TypeScript type guard function.",
        "returns": "boolean",
        "ts_returns": "value is FontValue"
      },
      "isValidFontValue": {
        "parameters": [
          {
            "name": "value",
            "description": "The value to test",
            "type": "any"
          }
        ],
        "description": "Returns true if value is a valid FontValue. This excludes `null` and `'initial'`. Use this to check if a value will be accepted by Font.from. This is also a valid TypeScript type guard function.",
        "returns": "value is FontValue",
        "ts_returns": "value is FontValue"
      }
    }
  },
  "relatedTypes": {
    "FontValue": "fontvalue",
    "FontLikeObject": "fontlikeobject",
    "FontString": "fontstring"
  },
  "links": [
    {
      "title": "Applying multiple font styles to TextViews",
      "snippet": "textview-font-bundled.js"
    }
  ]
}
