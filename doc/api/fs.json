{
  "type": "FileSystem",
  "category": "service",
  "object": "fs",
  "extends": "NativeObject",
  "description": "The `fs` object provides methods to read and write files. All methods are asynchronous and return a promise.",
  "constructor": {
    "access": "private"
  },
  "properties": {
    "filesDir": {
      "type": "string",
      "readonly": true,
      "const": true,
      "description": "The path of a directory that the app may use to store persistent files. This is *not* the directory that contains the files bundled with the project, e.g. images, js files, `package.json`. You can access these files using the `fetch` or `XMLHttpRequest` APIs."
    },
    "cacheDir": {
      "type": "string",
      "readonly": true,
      "const": true,
      "description": "An external path of a directory that the app may use to store cached files. External storage may be any type like permanent internal disc storage, sd-card or a usb stick. The OS may delete files in this directory when the device runs low on storage. Only use this location for data that can easily be re-created."
    },
    "externalFileDirs": {
      "type": {
        "interface": "Array",
        "generics": [
          "string"
        ]
      },
      "readonly": true,
      "const": true,
      "platforms": {
        "android": true
      },
      "description": "A list of external paths that the app may use to store persistent files. External storage may be any storage type like permanent internal disc storage, sd-card or a usb stick. In case no type of external storage is available the list will be empty.\n\nThis is *not* the directory that contains the files bundled with the project, e.g. images, js files, `package.json`. You can access these files using the `fetch` or `XMLHttpRequest` APIs."
    },
    "externalCacheDirs": {
      "type": {
        "interface": "Array",
        "generics": [
          "string"
        ]
      },
      "readonly": true,
      "const": true,
      "platforms": {
        "android": true
      },
      "description": "An list of external paths that the app may use to store cached files. External storage may be any type storage type like permanent internal disc storage, sd-card or a usb stick. In case no type of external storage is available the list will be empty.\n\nThe OS may delete files in this directory when the device runs low on storage. Only use this location for data that can easily be re-created."
    }
  },
  "methods": {
    "readFile": [
      {
        "parameters": [
          {
            "name": "path",
            "type": "string",
            "description": "The path of the file to read."
          }
        ],
        "returns": {
          "interface": "Promise",
          "generics": [
            "ArrayBuffer"
          ]
        },
        "description": "Reads the given file and returns a promise that resolves to the contents of the file on success and rejects with an error object if no file exists at that path. The file contents are returned as an ArrayBuffer."
      },
      {
        "parameters": [
          {
            "name": "path",
            "type": "string",
            "description": "The path of the file to read."
          },
          {
            "name": "encoding",
            "type": "string",
            "description": "The encoding to use to read text files."
          }
        ],
        "returns": {
          "interface": "Promise",
          "generics": [
            "string"
          ]
        },
        "description": "Reads the given text file and returns a promise that resolves to the contents of the file on success and rejects with an Error if no file exists at that path. The file contents are returned as a string."
      }
    ],
    "readDir": {
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "description": "The path of the directory to read."
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          {
            "interface": "Array",
            "generics": [
              "string"
            ]
          }
        ]
      },
      "description": "Reads the contents of a given directory. Returns a promise that resolves on success to an array of the names of the files in the directory excluding '.' and '..'. If no directory exists at that path the Promise rejects with an error object."
    },
    "writeFile": [
      {
        "parameters": [
          {
            "name": "path",
            "type": "string",
            "description": "The path of the file to write."
          },
          {
            "name": "data",
            "type": {
              "union": [
                "ArrayBuffer",
                "Blob"
              ]
            },
            "description": "The contents to write to the file."
          }
        ],
        "returns": {
          "interface": "Promise",
          "generics": [
            "void"
          ]
        },
        "description": "Writes the given binary contents to the given file. If the file exists, it is overwritten, otherwise it is created. Returns a promise that resolves on success and rejects with an Error in case of a failure."
      },
      {
        "parameters": [
          {
            "name": "path",
            "type": "string",
            "description": "The path of the file to write."
          },
          {
            "name": "text",
            "type": "string",
            "description": "The text to write to the file."
          },
          {
            "name": "encoding",
            "type": "string",
            "optional": true,
            "description": "The encoding to use to write a text file. When omitted, `utf-8` will be used."
          }
        ],
        "returns": {
          "interface": "Promise",
          "generics": [
            "void"
          ]
        },
        "description": "Writes the given text to the given file using the given encoding or `utf-8` if no encoding is specified. If the file exists, it is overwritten, otherwise it is created. Returns a promise that resolves on success and rejects with an Error in case of a failure."
      }
    ],
    "appendToFile": [
      {
        "parameters": [
          {
            "name": "path",
            "type": "string",
            "description": "The path of the file to append."
          },
          {
            "name": "data",
            "type": {
              "union": [
                "ArrayBuffer",
                "Blob"
              ]
            },
            "description": "The content to append to the file."
          }
        ],
        "returns": {
          "interface": "Promise",
          "generics": [
            "boolean"
          ]
        },
        "description": "Writes the given binary content to the given file. If the file exists, it is appended, otherwise it is created. Returns a promise that resolves with `true` if a new file was created, or with `false` if the file already existed. It rejects with an Error if the path points to a directory."
      },
      {
        "parameters": [
          {
            "name": "path",
            "type": "string",
            "description": "The path of the file to append."
          },
          {
            "name": "text",
            "type": "string",
            "description": "The text to write to the file."
          },
          {
            "name": "encoding",
            "type": "string",
            "optional": true,
            "description": "The encoding to use to write a text file. When omitted, `utf-8` will be used."
          }
        ],
        "returns": {
          "interface": "Promise",
          "generics": [
            "boolean"
          ]
        },
        "description": "Writes the given text to the given file using the given encoding or `utf-8` if no encoding is specified. If the file exists, it is appended, otherwise it is created. Returns a promise that resolves with `true` if a new file was created, or with `false` if the file already existed. It rejects with an Error if the path points to a directory."
      }
    ],
    "removeFile": {
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "description": "The path of the file to remove."
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          "void"
        ]
      },
      "description": "Removes the given file if it exists. Returns a promise that resolves on success or rejects if no file exists at that path. If the path points to a directory the promise also rejects."
    },
    "createDir": {
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "description": "The path of the directory to create."
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          "boolean"
        ]
      },
      "description": "Creates a directory on the given path, including intermediate directories. Returns a promise that resolves with `true` if the directory was created, or with `false` if it  already existed. If the path points to a file the promise rejects."
    },
    "removeDir": {
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "description": "The path of the directory to remove. Must be empty."
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          "void"
        ]
      },
      "description": "Removes the given directory if it exists. If the directory is not empty all its contents will also be deleted. Returns a promise that resolves if the directory was deleted or none existed at that path. If the path points to a file the promise rejects."
    },
    "remove": {
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "description": "The path to the file or directory to remove."
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          "boolean"
        ]
      },
      "description": "Removes the given file or directory. If the directory is not empty all its contents will also be deleted. If there is no file or directory at the given path nothing will happen. Returns a promise that resolves with `true` if something was deleted, otherwise `false`. Rejects with an error object only in case of an access error."
    },
    "openFile": {
      "parameters": [
        {
          "name": "options",
          "type": {
            "map": {
              "type": {
                "type": "string",
                "description": "A mime type to only select a certain category of files. Eg. `'image/png'` or `image/*`.",
                "default": "*/*",
                "optional": true
              },
              "quantity": {
                "type": {
                  "union": [
                    "'single'",
                    "'multiple'"
                  ]
                },
                "default": "single",
                "description": "The number of files to select.",
                "optional": true
              }
            }
          },
          "optional": true,
          "description": "An optional set of configuration parameters."
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          {
            "interface": "Array",
            "generics": [
              "File"
            ]
          }
        ]
      },
      "description": "Allows to select a file via a native file picker ui. The supplied `options` object provides additional configuration parameters to adjust the picker behavior.\n\nOnce the picker ui is closed the returned promise resolves with an array of `File` objects or an empty array if no file has been selected."
    },
    "isFile": {
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "description": "The path of the file."
        }
      ],
      "returns": "boolean",
      "description": "Returns `true` if there is a file at the given path. Otherwise (no file, or is a directory) it returns `false`."
    },
    "isDir": {
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "description": "The path of the directory."
        }
      ],
      "returns": "boolean",
      "description": "Returns `true` if there is a directory at the given path. Otherwise (no directory, or is a file) it returns `false`."
    },
    "set": [
      {
        "ts_only": true,
        "parameters": [
          {
            "name": "properties",
            "type": "never"
          }
        ],
        "description": "Sets all key-value pairs in the properties object.",
        "returns": "this"
      }
    ]
  },
  "links": [
    {
      "title": "Using the file system to read and write files",
      "snippet": "fs.jsx"
    },
    {
      "title": "Opening files and showing their properties",
      "snippet": "fs-openfile-advanced.jsx"
    }
  ]
}
