{
  "type": "CollectionView",
  "category": "widget",
  "generics": [
    {
      "name": "CellWidgetType",
      "extends": "Widget",
      "default": "Widget",
      "description": "The common widget class used for cells in this collectionView. It is recommended to use different classes for different [cell types](#celltype)."
    }
  ],
  "description": "A scrollable list that displays data items in cells, one per row. Cells are created on demand by the *createCell* callback and reused on scrolling.",
  "extends": {
    "interface": "Composite",
    "generics": ["CellWidgetType"]
  },
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "properties",
        "type": {
          "interface": "Properties",
          "generics": ["CollectionView"]
        },
        "ts_type": "Properties<Omit<CollectionView<CellWidgetType>, 'firstVisibleIndex' | 'lastVisibleIndex'>> & Partial<Pick<CollectionView<CellWidgetType>, 'cellHeight' | 'cellType' | 'createCell' | 'updateCell'>>",
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "properties": {
    "jsxAttributes": {
      "const": true,
      "readonly": true,
      "ts_only": true,
      "type": "JSXAttributes<this> & Partial<Record<'firstVisibleIndex' | 'lastVisibleIndex', never>> & Partial<Pick<this, 'cellHeight' | 'cellType' | 'createCell' | 'updateCell'>>"
    },
    "scrollbarVisible": {
      "type": "boolean",
      "default": "true",
      "description": "Allows to show or hide the scroll bar. When the scroll bar is hidden, it will be briefly visible while scrolling."
    },
    "cellHeight": {
      "type": {
        "union": [
          "number",
          "'auto'",
          {
            "callback": [{"name": "index", "type": "number"}, {"name": "cellType", "type": "string"}],
            "returns": {"name": "cellHeight", "type": {"union": ["number", "'auto'"]}}
          }
        ]
      },
      "default": "'auto'",
      "description": "The height of a collection cell. If set to `'auto'`, the cell height will be calculated individually for each cell. If set to a function, this function will be called for every item, providing the item index and the cell type as parameters, and must return the cell height for the given item.\nNote: On iOS `\"auto\"` may cause significant performance downgrade as it requires additional layouting passes to calculate cell height internally. If possible please use a combination of fixed `itemHeight` and `cellType` properties to specify different height for different cells."
    },
    "itemCount": {
      "type": "number",
      "description": "The number of items to display. To add or remove items later, use the methods `insert()` and `remove()` instead of setting the `itemCount`. To display a new list of items, use the `load()` method."
    },
    "createCell": {
      "type": {"callback": [
        {"name": "cellType", "type": "string"}],
        "returns": {"type": "CellWidgetType"}
      },
      "description": "A callback used to create a new reusable cell widget for a given type. This callback will be called by the framework and the created cell will be reused for different items. The created widget should be populated in the `updateCell` function."
    },
    "updateCell": {
      "type": {
        "callback": [{"name": "cell", "type": "CellWidgetType"}, {"name": "index", "type": "number"}],
        "returns": {"type": "void"}
      },
      "description": "A callback used to update a given cell widget to display the item with the given index. This callback will be called by the framework."
    },
    "cellType": {
      "type": {
        "union": [
          "string",
          {
            "callback": [{"name": "index", "type": "number"}],
            "returns": {"name": "cellType", "type": "string"}
          },
          "null"
        ]
      },
      "description": "The name of the cell type to use for the item at the given index. This name will be passed to the `createCell` and `cellHeight` callbacks. Cells will be reused only for those items that map to the same cell type. If set to a function, this function will be called for every item, providing the item index as a parameter, and must return a unique name for the cell type to use for the given item."
    },
    "refreshEnabled": {
      "type": "boolean",
      "default": "false",
      "description": "Enables the user to trigger a refresh by using the pull-to-refresh gesture."
    },
    "refreshIndicator": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the refresh indicator is currently visible. Will be set to `true` when a *refresh* event is triggered. Reset it to `false` when the refresh is finished."
    },
    "refreshMessage": {
      "type": "string",
      "default": "\"\"",
      "description": "The message text displayed together with the refresh indicator.",
      "platforms": {
        "android": false
      }
    },
    "firstVisibleIndex": {
      "type": "number",
      "readonly": true,
      "description": "The index of the first item that is currently visible on screen."
    },
    "lastVisibleIndex": {
      "type": "number",
      "readonly": true,
      "description": "The index of the last item that is currently visible on screen."
    },
    "columnCount": {
      "type": "number",
      "default": 1,
      "description": "The number of columns to display in the collection view. If set to a value `n > 1`, each row will contain `n` items. The available space will be equally distributed between columns."
    }
  },
  "events": {
    "refresh": {
      "description": "Fired when the user requested a refresh. An event listener should reset the *refreshIndicator* property when refresh is finished."
    },
    "scroll": {
      "description": "Fired while the collection view is scrolling.",
      "parameters": {
        "deltaX": {
          "description": "Currently always 0.",
          "type": "number"
        },
        "deltaY": {
          "description": "The delta of the scroll position. Positive when scrolling up and negative when scrolling down.",
          "type": "number"
        }
      }
    }
  },
  "methods": {
    "set": [
      {
        "ts_only": true,
        "generics": [
          {
            "name": "T",
            "extends": "NativeObject",
            "default": "this"
          }
        ],
        "parameters": [
          {
            "name": "properties",
            "type": "Properties<Omit<T, 'firstVisibleIndex' | 'lastVisibleIndex'>> & Partial<Pick<this, 'cellHeight' | 'cellType' | 'createCell'>>"
          }
        ],
        "description": "Sets all key-value pairs in the properties object as widget properties.\n\n**Important TypeScript note:** When called on `this` you may need to specify your custom type like this: `this.set<MyComponent>({propA: valueA});`",
        "returns": "this"
      }
    ],
    "load": {
      "parameters": [
        {
          "name": "itemCount",
          "type": "number",
          "description": "The number of items in the model to load."
        }
      ],
      "description": "Loads a new model with the given *itemCount*. This operation will update the `itemCount` property."
    },
    "insert": {
      "parameters": [
        {
          "name": "index",
          "type": "number"
        },
        {
          "name": "count",
          "type": "number",
          "optional": true,
          "description": "The position to insert the items at. A negative index is interpreted as relative to the end. If the given index is greater than the item count, new items will be appended at the end."
        }
      ],
      "description": "Inserts one or more items at the given index. When no *count* is specified, a single item will be added at the given *index*. New cells may be created if needed. The `updateCell` callback will only be called for those new items that become immediately visible. Note that inserting new items changes the index of all subsequent items. This operation will update the `itemCount` property."
    },
    "remove": {
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "description": "The index of the first item to remove. A negative value is interpreted as relative to the end."
        },
        {
          "name": "count",
          "type": "number",
          "optional": true,
          "description": "The number of items to remove."
        }
      ],
      "description": "Removes one or more items beginning with the given index. When no *count* is given, only the item at *index* will be removed. Note that this changes the index of all subsequent items, however. This operation will update the `itemCount` property."
    },
    "refresh": {
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": true,
          "description": "The index of the item that was changed."
        }
      ],
      "description": "Triggers an update of the item at the given *index* by calling the `updateCell` callback of the corresponding. If no *index* is given, all visible items will be updated."
    },
    "reveal": {
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "description": "The index of the item to reveal. If this is negative, it is interpreted as relative to the end"
        },
        {
          "name": "options",
          "type": "{animate?: boolean}",
          "optional": true,
          "description": "An additional object to control the animation. Set to `{animate: false}` to scroll without an animation. The `animate` property defaults to `true` when no options object is given."
        }
      ],
      "description": "Scrolls the item with the given index into view."
    },
    "itemIndex": {
      "parameters": [
        {
          "type": "Widget",
          "name": "widget",
          "description": "A widget instance created by `createCell`, or a child of that widget."
        }
      ],
      "description": "Determines the item index currently associated with the given cell.",
      "returns": "number"
    },
    "cellByItemIndex": {
      "parameters": [
        {
          "type": "number",
          "name": "itemIndex",
          "description": "The index of the item as given in `updateCell`."
        }
      ],
      "description": "Returns the cell currently associated with the given item index. Returns `null` if the item is not currently displayed.",
      "returns": {"union": ["CellWidgetType", "null"]}
    }
  },
  "links": [
    {
      "title": "Creating a simple CollectionView",
      "snippet": "collectionview.jsx"
    },
    {
      "title": "Creating a CollectionView with multiple cell types",
      "snippet": "collectionview-celltype.jsx"
    },
    {
      "title": "Creating a CollectionView with pull-to-refresh support",
      "snippet": "collectionview-refreshenabled.jsx"
    },
    {
      "title": "Creating a CollectionView with sticky headers",
      "snippet": "collectionview-scroll.jsx"
    },
    {
      "title": "Creating a CollectionView with dynamic column count",
      "snippet": "collectionview-columncount.jsx"
    }
  ]
}
