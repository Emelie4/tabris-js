{
  "type": "Button",
  "category": "widget",
  "description": "A push button. Can contain a text or an image.",
  "extends": "Widget",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "properties",
        "type": {
          "interface": "Properties",
          "generics": ["Button"]
        },
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "properties": {
    "jsxAttributes": {
      "const": true,
      "readonly": true,
      "ts_only": true,
      "type": "JSXAttributes<this> & {children?: Flatten<string|object>}"
    },
    "style": {
      "type": "string",
      "values": [
        "default",
        "elevate",
        "flat",
        "outline",
        "text"
      ],
      "default": "default",
      "const": true,
      "description": "The `style` controls the appearance of a `Button` and has to be provided in its constructor. The `default` style creates a platform specific button, which is flat on iOS and has an elevation and shadow on Android. In addition the following specific style values can be used:\n\n- `elevate` A button with a platform specific background color, elevation and a surrounding drop shadow. Only supported on Android\n- `flat` A button with no elevation and a platform specific background color\n- `outline` A button with a transparent background and an outline stroke which can be controlled via the properties `strokeWidth` and `strokeColor`\n- `text` A button with no background and only consisting of its text label."
    },
    "strokeColor": {
      "type": "ColorValue",
      "description": "Controls the line width of a button with the `style` _outline_."
    },
    "strokeWidth": {
      "type": {
        "union": [
          "number",
          "null"
        ]
      },
      "default": "null",
      "description": "Controls the line color of a button with the `style` _outline_. Uses a platform-specific default if set to `null`."
    },
    "alignment": {
      "type": "string",
      "values": [
        "left",
        "right",
        "centerX"
      ],
      "default": "centerX",
      "description": "The horizontal alignment of the button text."
    },
    "font": {
      "type": "FontValue",
      "description": "The font used for the button text."
    },
    "image": {
      "type": "ImageValue",
      "description": "An image to be displayed on the button."
    },
    "imageTintColor": {
      "type": "ColorValue",
      "description": "A color to change the `image` appearance. All opaque parts of the image will be tinted with the given color. Set to `initial` to remove the effect."
    },
    "text": {
      "type": "string",
      "description": "The button's label text.",
      "jsxContentProperty": true
    },
    "textColor": {
      "type": "ColorValue",
      "description": "The color of the text."
    },
    "autoCapitalize": {
      "type": {"union": ["'default'", "'none'", "'all'"]},
      "default": "'default'",
      "description": "Control how the button text is capitalized.\n\n* `'default'` - The platform decides on the capitalization\n* `'none'` - The text is displayed unaltered\n* `'all'` - Every letter is capitalized"
    }
  },
  "events": {
    "select": {
      "description": "Fired when the button is pressed."
    }
  },
  "links": [
    {
      "title": "Create a simple `Button`",
      "snippet": "button.jsx"
    },
    {
      "title": "Create buttons with different styles",
      "snippet": "button-style.jsx"
    }
  ]
}
