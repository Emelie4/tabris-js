{
  "type": "Image",
  "category": "data",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "imageLike",
        "type": "ImageLikeObject",
        "description": "An image configuration. See ${doc:ImageLikeObject}"
      }
    ]
  },
  "description": "This class represents an image source and optionally that image's dimension or the scale it should be displayed at. **For convenience there are [various expressions](#imagevalue) that may be used in place of an `Image` instance.** All API that accept these expressions will convert them to a `Image` object.",
  "properties": {
    "src": {
      "type": {
        "union": [
          "string",
          "ImageBitmap",
          "Blob"
        ]
      },
      "description": "As a string this is a file system path, relative path, full URL, a [`Blob`](./Blob.md) containing a `jpg` or `png` file, or an [`ImageBitmap`](./ImageBitmap.md) instance. [Data URIs](https://en.wikipedia.org/wiki/Data_URI_scheme) are also supported. Relative paths are resolved **relative to ‘package.json’**. On Android the name of a bundled [drawable resource](https://developer.android.com/guide/topics/resources/drawable-resource) can be provided with the url scheme android-drawable, e.g. android-drawable://ic_info_black.\nIf a closed ImageBitmap is given the constructor will throw.\nA given Blob must contain an encoded image.",
      "const": true,
      "readonly": true
    },
    "width": {
      "type": {"union": ["number", "'auto'"]},
      "description": "Image width in dip. Extracted from the image file when 'auto'.",
      "const": true,
      "readonly": true
    },
    "height": {
      "type": {"union": ["number", "'auto'"]},
      "description": "Image height in dip. Extracted from the image file when 'auto'.",
      "const": true,
      "readonly": true
    },
    "scale": {
      "type": {"union": ["number", "'auto'"]},
      "description": "Image scale factor - the image will be scaled down by this factor. See ${doc:ImageLikeObject} for details",
      "const": true,
      "readonly": true
    }
  },
  "methods": {
    "equals": {
      "description": "Tests if the given value is a `Image` instance that is deeply equal to this one.",
      "parameters": [{"name": "value", "type": "Image"}],
      "returns": "boolean"
    }
  },
  "statics": {
    "methods": {
      "from": {
        "parameters": [
          {
            "name": "imageValue",
            "description": "The value to create an Image instance from. See ${doc:ImageValue}",
            "type": "ImageValue"
          }
        ],
        "description": "Creates a new instance of Image using any valid Image expression. For any other value, including `null`, the method throws.",
        "returns": "Image"
      },
      "isImageValue": {
        "parameters": [
          {
            "name": "value",
            "description": "The value to test",
            "type": "any"
          }
        ],
        "description": "Returns true if value is an ImageValue. This includes `null`. Use this to check if a value will be accepted by an image property. This is also a valid TypeScript type guard function.",
        "returns": "boolean",
        "ts_returns": "value is ImageValue"
      },
      "isValidImageValue": {
        "parameters": [
          {
            "name": "value",
            "description": "The value to test",
            "type": "any"
          }
        ],
        "description": "Returns true if value is a valid ImageValue. This excludes `null`. Use this to check if a value will be accepted by Image.from. This is also a valid TypeScript type guard function.",
        "returns": "boolean",
        "ts_returns": "value is ImageValue"
      }
    }
  },
  "relatedTypes": {
    "ImageValue": "imagevalue",
    "ImageLikeObject": "imagelikeobject",
    "ImageSource": "imagesource"
  }
}
