{
  "type": "Picker",
  "category": "widget",
  "description": "A widget with a drop-down list of items to choose from.",
  "extends": "Widget",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "properties",
        "type": {
          "interface": "Properties",
          "generics": ["Picker"]
        },
        "ts_type": "Properties<Picker> & Partial<Pick<Picker, 'itemText'>>",
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "properties": {
    "jsxAttributes": {
      "const": true,
      "readonly": true,
      "ts_only": true,
      "type": "JSXAttributes<this> & Partial<Pick<Picker, 'itemText'>>"
    },
    "style": {
      "type": "string",
      "values": [
        "default",
        "outline",
        "fill",
        "underline",
        "none"
      ],
      "default": "default",
      "const": true,
      "description": "The visual appearance of the `Picker` widget.\n\nWith the `style` _outline_, _fill_ or _underline_ the message hint will float above the `Picker` on Android. This behavior can be controlled with the property `floatMessage`. The `style` _none_ will remove any background visualization, allowing to create a custom background. ",
      "platforms": {
        "ios": false
      }
    },
    "message": {
      "type": "string",
      "description": "A hint text that is displayed when the picker has no selection."
    },
    "floatMessage": {
      "type": "boolean",
      "default": "true",
      "description": "Whether the hint message should float above the Picker when focus is gained.",
      "platforms": {
        "ios": false
      }
    },
    "itemCount": {
      "type": "number",
      "description": "The number of items to display."
    },
    "itemText": {
      "type": {
        "callback": [{"name": "index", "type": "number"}],
        "returns": {"type": "string"}
      },
      "description": "A function that returns the string to display for a given index."
    },
    "selectionIndex": {
      "type": "number",
      "description": "The index of the currently selected item."
    },
    "borderColor": {
      "type": "ColorValue",
      "description": "The color of the Picker border. This can be the surrounding line or the underline of the Picker depending on the `style` property."
    },
    "textColor": {
      "type": "ColorValue",
      "description": "The color of the text."
    },
    "font": {
      "type": "FontValue",
      "description": "The font used for the text inside the Picker."
    }
  },
  "methods": {
    "set": [{
      "ts_only": true,
      "generics": [
        {
          "name": "T",
          "extends": "NativeObject",
          "default": "this"
        }
      ],
      "parameters": [
        {
          "name": "properties",
          "type": "Properties<T> & Partial<Pick<this, 'itemText'>>"
        }
      ],
      "description": "Sets all key-value pairs in the properties object as widget properties.\n\n**Important TypeScript note:** When called on `this` you may need to specify your custom type like this: `this.set<MyComponent>({propA: valueA});`",
      "returns": "this"
    }]
  },
  "events": {
    "select": {
      "description": "Fired when an item was selected by the user.",
      "parameters": {
        "index": {
          "description": "Contains the index of the selected item.",
          "type": "number"
        }
      }
    }
  },
  "links": [
    {
      "title": "Creating a simple `Picker`",
      "snippet": "picker.jsx"
    }
  ]
}
