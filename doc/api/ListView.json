{
    "category": "widget",
    "type": "ListView",
    "extends": {
      "interface": "CollectionView",
      "generics": ["Cell"]
    },
    "markdown_only": true,
    "module": "tabris-decorators",
    "generics": [{"name": "ItemType", "default": "any"}],
    "namespace": false,
    "jsxChildren": ["Cell"],
    "links": [
      {
        "title": "Examples with various cell types and selection events",
        "snippet": "listview-cells-jsx",
        "repo": "tabris-decorators"
      },
      {
        "title": "Data Binding Example",
        "snippet": "bind-listview-list-jsx",
        "repo": "tabris-decorators"
      },
      {
        "title": "Examples with various cell types and selection events (TypeScript variant)",
        "snippet": "listview-cells",
        "repo": "tabris-decorators"
      },
      {
        "title": "Data Binding Example (TypeScript variant)",
        "snippet": "bind-listview-list",
        "repo": "tabris-decorators"
      },
      {
        "title": "Examples with various cell types and selection events (Plain JavaScript - some features not supported)",
        "snippet": "listview-cells-js",
        "repo": "tabris-decorators"
      }
    ],
    "statics": {
      "methods": {
        "select": {
          "parameters": [
            {
              "name": "ev",
              "type": "EventObject"
            },
            {
              "name": "action",
              "type": "number",
              "optional": true,
              "description": "A numeric value passed on to the `select` event object, defaults to `0`."
            }
          ],
          "description": "This is a helper method intended to be used in an event listener of any event of `Cell` or its children. It triggers a `select` event on the `ListView` containing the cell. [The `action` value is set on the resulting `ListViewSelectEvent` event object](#select).\n\nExample usage: `onTap={ev => ListView.select(ev, someNumber)}`.\n\n Use `selectPrimary`, `selectSecondary`, `selectToggle` or `selectDismiss` as a shorthand to trigger `select` with a specific value for `action`, **or just set the [`selectable`](./Cell.md#selectable) property of `Cell`**."
        },
        "selectPrimary": {
          "parameters": [{"name": "ev", "type": "EventObject"}],
          "description": "This is a helper method intended to be used directly as an event listener of any event of `Cell` or its children. Like [the `select` method](#selectev-action) it triggers a `select` event on the `ListView` containing the cell. This difference is only semantic: [The `action` value on the `ListViewSelectEvent` event object](#select) will be set to `ItemAction.Primary` (i.e. `1`), indicating a 'normal' selection.\n\nExample usage: `onTap={ListView.selectPrimary}`."
        },
        "selectSecondary": {
          "parameters": [{"name": "ev", "type": "EventObject"}],
          "description": "This is a helper method intended to be used directly as an event listener of any event of `Cell` or its children. Like [the `select` method](#selectev-action) it  triggers a `select` event on the `ListView` containing the cell. This difference is only semantic: [The `action` value on the `ListViewSelectEvent` event object](#select) will be set to `ItemAction.Secondary` (i.e. `2`), indicating some alternative kind of selection.\n\nExample usage: `onSomeEvent={ListView.selectSecondary}`."
        },
        "selectToggle": {
          "parameters": [{"name": "ev", "type": "EventObject"}],
          "description": "This is a helper method intended to be used directly as an event listener of any event of `Cell` or its children. Like [the `select` method](#selectev-action) it  triggers a `select` event on the `ListView` containing the cell. This difference is only semantic: [The `action` value on the `ListViewSelectEvent` event object](#select) will be set to `ItemAction.Toggle` (i.e. `3`), typically indicating the item should be marked as checked or unchecked.\n\nExample usage: `onSomeEvent={ListView.selectToggle}`."
        },
        "selectDismiss": {
          "parameters": [{"name": "ev", "type": "EventObject"}],
          "description": "This is a helper method intended to be used directly as an event listener of any event of `Cell` or its children. Like [the `select` method](#selectev-action) it  triggers a `select` event on the `ListView` containing the cell. This difference is only semantic: [The `action` value on the `ListViewSelectEvent` event object](#select) will be set to `ItemAction.Dismiss` (i.e. `4`), typically indicating the item should be removed .\n\nExample usage:`onSomeEvent={ListView.selectDismiss}`."
        }
      }
    },
    "constructor": {
      "access": "public",
      "parameters": [
        {
          "name": "properties",
          "type": {
            "interface": "Properties",
            "generics": ["ListView"]
          },
          "optional": true,
          "description": "Sets all key-value pairs in the properties object as widget properties."
        }
      ]
    },
    "events": {
      "select": {
        "parameters": {
          "item": {
            "type": "ItemType",
            "description": "The item currently associated with the Cell that triggered the event."
          },
          "itemIndex": {
            "type": "number",
            "description": "The index of the item within the `items` list/array."
          },
          "originalEvent": {
            "type": "EventObject",
            "description": "The event that was the cause of this select event."
          },
          "action": {
            "type": "number",
            "description": "A general-purpose parameter passed on when the event was triggered by one of the [static `select` methods](#selectev-action). This is meant to be used by the application to differentiate between different kind of interactions. It can be safely ignored if there is only one kind of selection, such as tapping a cell. <br/><br/>`tabris-decorators` exports a `ItemAction` enum defining 4 pre-defined values for use with this property: `Primary`, `Secondary`, `Toggle` and `Dismiss`. These are set when using the corresponding [trigger methods](#selectprimaryev)."
          }
        },
        "description": "An event that may be triggered by a `Cell` as the result of any kind of user interaction. By default cells do not trigger `select` events, they have to be explicitly configured to do so. This can be done via the [`selectable`](./Cell.md#selectable) property on `Cell` or the static [`select`](#selectprimaryev) trigger methods."
      }
    },
    "properties": {
      "items": {
        "type": {
          "union": [
            {
              "interface": "List",
              "generics": ["ItemType"]
            },
            {
              "interface": "Array",
              "generics": ["ItemType"]
            }
          ]
        },
        "description": "List or Array containing the items that to be displayed. If a `List` is used any changes to the list (items added/removed/replaced) the `ListView` updates itself automatically. The updated will be animated if possible."
      }
    }
  }
