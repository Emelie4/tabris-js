{
  "type": "TextView",
  "category": "widget",
  "description": "A widget to display a text. For images, use ImageView.",
  "extends": "Widget",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "properties",
        "type": {
          "interface": "Properties",
          "generics": ["TextView"]
        },
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "properties": {
    "jsxAttributes": {
      "const": true,
      "readonly": true,
      "ts_only": true,
      "type": "JSXAttributes<this> & {children?: JSXDefaultChildren}"
    },
    "alignment": {
      "type": "string",
      "values": [
        "left",
        "right",
        "centerX"
      ],
      "default": "left",
      "description": "The horizontal alignment of the text."
    },
    "selectable": {
      "type": "boolean",
      "description": "Whether the text can be selected or not.",
      "platforms": {
        "ios": false
      }
    },
    "markupEnabled": {
      "type": "boolean",
      "description": "Allows for a subset of HTML tags in the text. Supported tags are: `a`, `del`, `ins`, `b`, `i`, `strong`, `em`, `big`, `small`, `br`.\n\nAll tags except `<br/>` support the attributes \"font\" and \"textColor\" with the same values as the `TextView` itself. IOS does not support to colorize links (`<a>`) with the `textColor` attribute.\n\nAll tags must be closed (e.g. use `<br/>` instead of `<br>`). Nesting tags is not supported on iOS. A platform might allow to use additional tags but cross-platform compatibility is only guaranteed for the tags listed above.\n\nWhen the text is given as the content of a `<TextView>` JSX element, `markupEnabled` will parse the text more like HTML, i.e. consecutive white spaces will be merged."
    },
    "text": {
      "type": "string",
      "description": "The text to display.",
      "jsxContentProperty": true
    },
    "textColor": {
      "type": "ColorValue",
      "description": "The color of the text."
    },
    "maxLines": {
      "type": {"union": ["number", "null"]},
      "default": "null",
      "description": "Limit the number of lines to be displayed to the given maximum. `null` disables this limit."
    },
    "lineSpacing": {
      "type": "number",
      "default": "1.0",
      "description": "The amount of space between each line of text. The `lineSpacing` property is a factor with a default value of `1.0`."
    },
    "font": {
      "type": "FontValue",
      "description": "The font used for the text."
    }
  },
  "events": {
    "tapLink": {
      "eventObject": "TextViewTapLinkEvent",
      "description": "Fires when the user clicks on a link in an html text. Requires to set `markupEnabled` to true and to provide a text containing an anchor (`<a>`) with an `href` attribute. Eg. `textView.text = 'Website: <a href=\"http://example.com>example.com</a>'`. The event object contains a property `url` which provides the anchors `href` url.",
      "parameters": {
        "url": {
          "description": "The url referenced by the `href` attribute of the anchor.",
          "type": "string"
        }
      }
    }
  },
  "links": [
    {
      "title": "Creating a simple `TextView`",
      "snippet": "textview.jsx"
    },
    {
      "title": "Creating a `TextView` with support for markup",
      "snippet": "textview-markupenabled.jsx"
    },
    {
      "title": "Creating a `TextView` with support for text links",
      "snippet": "textview-link.jsx"
    },
    {
      "title": "Demonstrating various line spacing values on a `TextView`",
      "snippet": "textview-link.jsx"
    },
    {
      "title": "Creating a `TextView` with an external font",
      "snippet": "textview-font-external.js"
    }
  ]
}
