{
  "type": "TextInput",
  "description": "A widget that allows to enter text.",
  "extends": "Widget",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "properties",
        "type": "PropertiesObject",
        "ts_type": "Properties<TextInput>",
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "properties": {
    "type": {
      "type": "string",
      "values": [
        "default",
        "password",
        "search",
        "multiline"
      ],
      "default": "default",
      "static": true,
      "description": "The type of the text widget. Windows 10 currently interprets `search`  as `default`."
    },
    "text": {
      "type": "string",
      "description": "The text in the input field."
    },
    "textColor": {
      "type": "Color",
      "description": "The color of the text."
    },
    "message": {
      "type": "string",
      "description": "A hint text that is displayed when the input field is empty. Does not apply on iOS when `type` is set to `multiline`."
    },
    "editable": {
      "type": "boolean",
      "default": "true",
      "description": "Whether the text can be edited or not."
    },
    "alignment": {
      "type": "string",
      "values": [
        "left",
        "right",
        "center"
      ],
      "default": "left",
      "description": "The horizontal alignment of the text.",
      "platforms": {
        "windows": false
      }
    },
    "autoCorrect": {
      "type": "boolean",
      "default": "false",
      "description": "Enables the spell checker and auto-correction feature."
    },
    "autoCapitalize": {
      "type": "any",
      "default": false,
      "values": [
        true,
        false,
        "none",
        "sentence",
        "word",
        "all"
      ],
      "description": "Control how text input is capitalized.\n\n`none` - Do not change any text input\n`sentence` - Capitalize the first word of a sentence\n`word` - Capitalize every word\n`all` - Capitalize every letter\n\nThe boolean value `false` maps to `none` whereas `true` is equal to `all`.",
      "platforms": {
        "windows": false
      }
    },
    "keyboard": {
      "type": "string",
      "values": [
        "ascii",
        "decimal",
        "email",
        "number",
        "numbersAndPunctuation",
        "phone",
        "url",
        "default"
      ],
      "default": "default",
      "description": "Selects the keyboard type to use for editing this widget. Has no effect when `type` is set to `multiline`."
    },
    "enterKeyType": {
      "type": "string",
      "values": [
        "default",
        "done",
        "next",
        "send",
        "search",
        "go"
      ],
      "default": "default",
      "description": "Label or icon to display on the keyboard 'confirmation' key. The key press can be captured via the `accept` event. Setting an `enterKeyType` other than `default` will change the key behavior to not close the keyboard automatically. The developer is able close the keyboard by removing the focus from the `TextInput`."
    },
    "focused": {
      "type": "boolean",
      "default": "false",
      "description": "Reflects whether this widget has the keyboard focus. Setting this property to `true` will focus the widget and open the virtual keyboard, setting it to `false` will remove the focus and hide the virtual keyboard."
    },
    "keepFocus": {
      "type": "boolean",
      "default": "false",
      "description": "When `true` the `TextInput` will keep its focus, even when tapped outside of the widget bounds.",
      "platforms": {
        "windows": false
      }
    },
    "fillColor": {
      "type": "Color",
      "description": "The color of the background of the TextInput - applies only to iOS.",
      "platforms": {
        "windows": false,
        "android": false
      }
    },
    "borderColor": {
      "type": "Color",
      "description": "The color of the border of the TextInput. On iOS this is a rectangular border around the TextInput, on Android it is a single line below the TextInput.",
      "platforms": {
        "windows": false
      }
    },
    "revealPassword": {
      "type": "boolean",
      "description": "Makes the text visible when the `TextInput` has the type `password`.",
      "platforms": {
        "windows": false
      }
    },
    "cursorColor": {
      "type": "Color",
      "description": "The color of the cursor in the `TextInput`.",
      "platforms": {
        "windows": false,
        "android": false
      }
    },
    "selection": {
      "type": "number[]",
      "description": "The `selection` is a two element number array representing the text selections start and end position. The native platform usually shows selection handles so that the selection can be changed by the user. A `selection` array where both numbers are the same represent a single cursor at the given position. The selection start is the index of the first character where as the end is the index of the last character + 1. E.g. to select the word \"ok\" the selection would be `[0, 2]`.\n\nTo make a selection visible the `TextInput` has to be in focus. Consequently the selection is preserved when the focus is lost and regained. When the user gives the `TextInput` focus by tapping on it, the selection is changed to represent his touch position.\n\n Getting the `selection` upon user interaction (e.g. a button press) the focus would be lost and possibly the `selection` altered due to user interaction. In such a scenario it is recommended to set the [`keepFocus`](#keepFocus) property to `true`.",
      "platforms": {
        "windows": false
      }
    },
    "keyboardAppearanceMode": {
      "type": "string",
      "values": [
        "never",
        "ontouch",
        "onfocus"
      ],
      "default": "onfocus",
      "description": "Allows to control when to show the virtual keyboard.\n\n- `'never'` - The keyboard is never shown when focus is gained.\n\n- `'ontouch'` - The keyboard is not shown when the `focused` property is set to `true` programmatically. Only the blinking cursor will be shown. Touching the `TextInput` will show the keyboard.\n\n- `'onfocus'` - The keyboard is always shown when the `TextInput` gains focus.",
      "platforms": {
        "ios": false,
        "windows": false
      }
    }
  },
  "events": {
    "accept": {
      "description": "Fired when a text input has been finished by pressing the keyboard's Enter key. The label of this key may vary depending on the platform and locale.",
      "parameters": {
        "text": {
          "description": "The current value of *[text](#text)*.",
          "type": "string"
        }
      }
    },
    "select": {
      "description": "The `select` event is fired when the user alters the text [`selection`](#selection). Either by dragging the selection handles of a text selection, by moving the cursor inside the text or by typing which also advances the cursor.\n\nThe event also fires when the user taps inside a `TextInput` since this involves to set the cursor to the tapped position.",
      "parameters": {
        "selection": {
          "description": "The current `selection` as a two element number array of start and end position.",
          "type": "number[]"
        }
      }
    },
    "blur": {
      "description": "Fired when the widget lost focus."
    },
    "focus": {
      "description": "Fired when the widget gains focus."
    },
    "input": {
      "description": "Fired when the text was changed by the user.",
      "parameters": {
        "text": {
          "type": "string",
          "description": "The new value of *[text](#text)*."
        }
      }
    },
    "beforeTextChange": {
      "description": "Fired when the text value is about to change due to a user action.",
      "parameters": {
        "preventDefault": {
          "description": "Call to intercept the change. ",
          "type": "Function"
        },
        "oldValue": {
          "description": "The text before the change, i.e. the current `text` value.",
          "type": "string"
        },
        "newValue": {
          "description": "The text after the change, i.e. the future `text` value if `preventDefault` is not called.",
          "type": "string"
        }
      }
    }
  },
  "links": [
    {
      "title": "Simple TextInput snippet",
      "path": "${GITHUB_BRANCH}/snippets/textinput.js"
    },
    {
      "title": "Example with Text and other input controls",
      "path": "${GITHUB_BRANCH}/examples/input/input.js"
    }
  ]
}
