{
  "type": "Listeners",
  "category": "core",
  "generics": [
    {
      "name": "EventData",
      "extends": {
        "map": {"target": {"type": "object"}}
      },
      "description": "A plain object containing the data to be passed to the listeners in addition to `target`, `type` and `timeStamp`."
    }
  ],
  "description": "Objects of the type `Listeners` provide methods to manage listeners and trigger events. They encapsulate the tabris event system in a way that is more convenient to use with TypeScript, `async`/`await` and RxJS.",
  "extends": {
    "interface": "Observable",
    "generics": ["EventData"]
  },
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "target",
        "type": "object",
        "ts_type": "TargetType<EventData>"
      },
      {
        "name": "type",
        "type": "string"
      }
    ]
  },
  "properties": {
    "type": {
      "type": "string",
      "readonly": true,
      "description": "The event type. This value will be set in the `type` field of the event object given to the listener. It is the same value used by the [on](${doc:NativeObjectUrl}#ontype-listener-context) and [trigger](${doc:NativeObjectUrl}#triggertype) methods."
    },
    "target": {
      "type": "object",
      "ts_type": "TargetType<EventData>",
      "readonly": true,
      "description": "The object that issues the events, e.g. a widget."
    }
  },
  "methods": {
    "addListener": [
      {
        "description": "Registers a listener to be notified by new events. Each listener can only be added once. Returns the target object. **Instances of  `Listeners` can also be called directly as a function to register a new listener.** I.e. `widget.onResize(listener);` is the same as `widget.onResize.addListener(listener);` It is also the same as `widget.on('resize', listener');`, but with better TypeScript support. ",
        "parameters": [
          {
            "name": "listener",
            "type": "Function",
            "ts_type": "Listener<EventData>",
            "description": "The listener function called with the [event object](./EventObject.md)"
          }
        ],
        "returns": "this.target",
        "ts_returns": "TargetType<EventData>"
      }
    ],
    "removeListener": [
      {
        "description": "Deregisters a listener, it will not be notified of future events. Returns the target object.",
        "parameters": [
          {
            "name": "listener",
            "type": "Function",
            "ts_type": "Listener<EventData>"
          }
        ],
        "returns": "this.target",
        "ts_returns": "TargetType<EventData>"
      }
    ],
    "once": [
      {
        "description": "Notifies the given listener the next time an event is issued, but not afterwards. Returns the target object.",
        "parameters": [
          {
            "name": "listener",
            "type": "Function",
            "ts_type": "Listener<EventData>",
            "description": "The listener function called with the [event object](./EventObject.md)"
          }
        ],
        "returns": "this.target",
        "ts_returns": "TargetType<EventData>"
      }
    ],
    "promise" : [
      {
        "description": "Returns a promise that resolves the next time an event is issued. The dispatched event object will be used as the resolved value.",
        "returns": {
          "interface": "Promise",
          "generics": ["EventObject"]
        },
        "ts_returns": "Promise<ExtendedEvent<EventData>>"
      }
    ],
    "trigger" : [
      {
        "description": "Issues a plain event object to all registered listeners with a newly constructed event object.",
        "returns": "this.target",
        "ts_returns": "TargetType<EventData>"
      },
      {
        "description": "Issues an event object to all registered listeners. If an _uninitialized_ (not previously issued) instance of `EventObject` is given as the argument it will be issued directly as-is. Any other type of object (including an already initialized/previously issued event object) will be copied to create a new event object. This allows for simple event re-routing.",
        "parameters": [
          {
            "name": "eventData",
            "optional": true,
            "type": "EventData",
            "ts_type": "ListenersTriggerParam<EventData>"
          }
        ],
        "returns": "this.target",
        "ts_returns": "TargetType<EventData>"
      }
    ],
    "triggerAsync": [
      {
        "parameters": [
          {
            "name": "eventData",
            "optional": true,
            "type": "object",
            "ts_type": "ListenersTriggerParam<EventData>"
          }
        ],
        "returns": "Promise<this.target>",
        "ts_returns": "Promise<TargetType<EventData>>",
        "description": "Like `trigger`, but returns a promise. The promise will resolve when all asynchronous listeners (if any) have resolved. If none of the listeners are asynchronous (return a promise) this method works just like `trigger()`. Useful for unit testing."
      }
    ]
  },
  "statics": {
    "methods": {
      "getListenerStore": {
        "ts_only": true,
        "parameters": [
          {
            "name": "target",
            "type": "object",
            "description": "This is a low-level API not typically used in application development. Returns the object used to manage listeners registered by `Listeners.addListener` for the given target object. For `NativeObject` instances this is the target itself."
          }
        ],
        "returns": "object",
        "ts_returns": "Pick<NativeObject, 'on' | 'off' | 'once' | 'trigger'>"
      }
    }
  }
}
